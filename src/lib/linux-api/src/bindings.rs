/* automatically generated by rust-bindgen 0.65.1 */

/* Build script: ./gen-kernel-bindings.sh */
/* Kernel tag: v6.2 */

pub const LINUX_EPERM: u32 = 1;
pub const LINUX_ENOENT: u32 = 2;
pub const LINUX_ESRCH: u32 = 3;
pub const LINUX_EINTR: u32 = 4;
pub const LINUX_EIO: u32 = 5;
pub const LINUX_ENXIO: u32 = 6;
pub const LINUX_E2BIG: u32 = 7;
pub const LINUX_ENOEXEC: u32 = 8;
pub const LINUX_EBADF: u32 = 9;
pub const LINUX_ECHILD: u32 = 10;
pub const LINUX_EAGAIN: u32 = 11;
pub const LINUX_ENOMEM: u32 = 12;
pub const LINUX_EACCES: u32 = 13;
pub const LINUX_EFAULT: u32 = 14;
pub const LINUX_ENOTBLK: u32 = 15;
pub const LINUX_EBUSY: u32 = 16;
pub const LINUX_EEXIST: u32 = 17;
pub const LINUX_EXDEV: u32 = 18;
pub const LINUX_ENODEV: u32 = 19;
pub const LINUX_ENOTDIR: u32 = 20;
pub const LINUX_EISDIR: u32 = 21;
pub const LINUX_EINVAL: u32 = 22;
pub const LINUX_ENFILE: u32 = 23;
pub const LINUX_EMFILE: u32 = 24;
pub const LINUX_ENOTTY: u32 = 25;
pub const LINUX_ETXTBSY: u32 = 26;
pub const LINUX_EFBIG: u32 = 27;
pub const LINUX_ENOSPC: u32 = 28;
pub const LINUX_ESPIPE: u32 = 29;
pub const LINUX_EROFS: u32 = 30;
pub const LINUX_EMLINK: u32 = 31;
pub const LINUX_EPIPE: u32 = 32;
pub const LINUX_EDOM: u32 = 33;
pub const LINUX_ERANGE: u32 = 34;
pub const LINUX_EDEADLK: u32 = 35;
pub const LINUX_ENAMETOOLONG: u32 = 36;
pub const LINUX_ENOLCK: u32 = 37;
pub const LINUX_ENOSYS: u32 = 38;
pub const LINUX_ENOTEMPTY: u32 = 39;
pub const LINUX_ELOOP: u32 = 40;
pub const LINUX_EWOULDBLOCK: u32 = 11;
pub const LINUX_ENOMSG: u32 = 42;
pub const LINUX_EIDRM: u32 = 43;
pub const LINUX_ECHRNG: u32 = 44;
pub const LINUX_EL2NSYNC: u32 = 45;
pub const LINUX_EL3HLT: u32 = 46;
pub const LINUX_EL3RST: u32 = 47;
pub const LINUX_ELNRNG: u32 = 48;
pub const LINUX_EUNATCH: u32 = 49;
pub const LINUX_ENOCSI: u32 = 50;
pub const LINUX_EL2HLT: u32 = 51;
pub const LINUX_EBADE: u32 = 52;
pub const LINUX_EBADR: u32 = 53;
pub const LINUX_EXFULL: u32 = 54;
pub const LINUX_ENOANO: u32 = 55;
pub const LINUX_EBADRQC: u32 = 56;
pub const LINUX_EBADSLT: u32 = 57;
pub const LINUX_EDEADLOCK: u32 = 35;
pub const LINUX_EBFONT: u32 = 59;
pub const LINUX_ENOSTR: u32 = 60;
pub const LINUX_ENODATA: u32 = 61;
pub const LINUX_ETIME: u32 = 62;
pub const LINUX_ENOSR: u32 = 63;
pub const LINUX_ENONET: u32 = 64;
pub const LINUX_ENOPKG: u32 = 65;
pub const LINUX_EREMOTE: u32 = 66;
pub const LINUX_ENOLINK: u32 = 67;
pub const LINUX_EADV: u32 = 68;
pub const LINUX_ESRMNT: u32 = 69;
pub const LINUX_ECOMM: u32 = 70;
pub const LINUX_EPROTO: u32 = 71;
pub const LINUX_EMULTIHOP: u32 = 72;
pub const LINUX_EDOTDOT: u32 = 73;
pub const LINUX_EBADMSG: u32 = 74;
pub const LINUX_EOVERFLOW: u32 = 75;
pub const LINUX_ENOTUNIQ: u32 = 76;
pub const LINUX_EBADFD: u32 = 77;
pub const LINUX_EREMCHG: u32 = 78;
pub const LINUX_ELIBACC: u32 = 79;
pub const LINUX_ELIBBAD: u32 = 80;
pub const LINUX_ELIBSCN: u32 = 81;
pub const LINUX_ELIBMAX: u32 = 82;
pub const LINUX_ELIBEXEC: u32 = 83;
pub const LINUX_EILSEQ: u32 = 84;
pub const LINUX_ERESTART: u32 = 85;
pub const LINUX_ESTRPIPE: u32 = 86;
pub const LINUX_EUSERS: u32 = 87;
pub const LINUX_ENOTSOCK: u32 = 88;
pub const LINUX_EDESTADDRREQ: u32 = 89;
pub const LINUX_EMSGSIZE: u32 = 90;
pub const LINUX_EPROTOTYPE: u32 = 91;
pub const LINUX_ENOPROTOOPT: u32 = 92;
pub const LINUX_EPROTONOSUPPORT: u32 = 93;
pub const LINUX_ESOCKTNOSUPPORT: u32 = 94;
pub const LINUX_EOPNOTSUPP: u32 = 95;
pub const LINUX_EPFNOSUPPORT: u32 = 96;
pub const LINUX_EAFNOSUPPORT: u32 = 97;
pub const LINUX_EADDRINUSE: u32 = 98;
pub const LINUX_EADDRNOTAVAIL: u32 = 99;
pub const LINUX_ENETDOWN: u32 = 100;
pub const LINUX_ENETUNREACH: u32 = 101;
pub const LINUX_ENETRESET: u32 = 102;
pub const LINUX_ECONNABORTED: u32 = 103;
pub const LINUX_ECONNRESET: u32 = 104;
pub const LINUX_ENOBUFS: u32 = 105;
pub const LINUX_EISCONN: u32 = 106;
pub const LINUX_ENOTCONN: u32 = 107;
pub const LINUX_ESHUTDOWN: u32 = 108;
pub const LINUX_ETOOMANYREFS: u32 = 109;
pub const LINUX_ETIMEDOUT: u32 = 110;
pub const LINUX_ECONNREFUSED: u32 = 111;
pub const LINUX_EHOSTDOWN: u32 = 112;
pub const LINUX_EHOSTUNREACH: u32 = 113;
pub const LINUX_EALREADY: u32 = 114;
pub const LINUX_EINPROGRESS: u32 = 115;
pub const LINUX_ESTALE: u32 = 116;
pub const LINUX_EUCLEAN: u32 = 117;
pub const LINUX_ENOTNAM: u32 = 118;
pub const LINUX_ENAVAIL: u32 = 119;
pub const LINUX_EISNAM: u32 = 120;
pub const LINUX_EREMOTEIO: u32 = 121;
pub const LINUX_EDQUOT: u32 = 122;
pub const LINUX_ENOMEDIUM: u32 = 123;
pub const LINUX_EMEDIUMTYPE: u32 = 124;
pub const LINUX_ECANCELED: u32 = 125;
pub const LINUX_ENOKEY: u32 = 126;
pub const LINUX_EKEYEXPIRED: u32 = 127;
pub const LINUX_EKEYREVOKED: u32 = 128;
pub const LINUX_EKEYREJECTED: u32 = 129;
pub const LINUX_EOWNERDEAD: u32 = 130;
pub const LINUX_ENOTRECOVERABLE: u32 = 131;
pub const LINUX_ERFKILL: u32 = 132;
pub const LINUX_EHWPOISON: u32 = 133;
pub const LINUX_CLONE_VM: u32 = 256;
pub const LINUX_CLONE_FS: u32 = 512;
pub const LINUX_CLONE_FILES: u32 = 1024;
pub const LINUX_CLONE_SIGHAND: u32 = 2048;
pub const LINUX_CLONE_PIDFD: u32 = 4096;
pub const LINUX_CLONE_PTRACE: u32 = 8192;
pub const LINUX_CLONE_VFORK: u32 = 16384;
pub const LINUX_CLONE_PARENT: u32 = 32768;
pub const LINUX_CLONE_THREAD: u32 = 65536;
pub const LINUX_CLONE_NEWNS: u32 = 131072;
pub const LINUX_CLONE_SYSVSEM: u32 = 262144;
pub const LINUX_CLONE_SETTLS: u32 = 524288;
pub const LINUX_CLONE_PARENT_SETTID: u32 = 1048576;
pub const LINUX_CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const LINUX_CLONE_DETACHED: u32 = 4194304;
pub const LINUX_CLONE_UNTRACED: u32 = 8388608;
pub const LINUX_CLONE_CHILD_SETTID: u32 = 16777216;
pub const LINUX_CLONE_NEWCGROUP: u32 = 33554432;
pub const LINUX_CLONE_NEWUTS: u32 = 67108864;
pub const LINUX_CLONE_NEWIPC: u32 = 134217728;
pub const LINUX_CLONE_NEWUSER: u32 = 268435456;
pub const LINUX_CLONE_NEWPID: u32 = 536870912;
pub const LINUX_CLONE_NEWNET: u32 = 1073741824;
pub const LINUX_CLONE_IO: u32 = 2147483648;
pub const LINUX_CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const LINUX_CLONE_INTO_CGROUP: u64 = 8589934592;
pub const LINUX_CLONE_NEWTIME: u32 = 128;
pub const LINUX_CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const LINUX_CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const LINUX_CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const LINUX_CLOCK_REALTIME: u32 = 0;
pub const LINUX_CLOCK_MONOTONIC: u32 = 1;
pub const LINUX_CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const LINUX_CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const LINUX_CLOCK_MONOTONIC_RAW: u32 = 4;
pub const LINUX_CLOCK_REALTIME_COARSE: u32 = 5;
pub const LINUX_CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const LINUX_CLOCK_BOOTTIME: u32 = 7;
pub const LINUX_CLOCK_REALTIME_ALARM: u32 = 8;
pub const LINUX_CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const LINUX_CLOCK_SGI_CYCLE: u32 = 10;
pub const LINUX_CLOCK_TAI: u32 = 11;
pub const LINUX_SIGHUP: u32 = 1;
pub const LINUX_SIGINT: u32 = 2;
pub const LINUX_SIGQUIT: u32 = 3;
pub const LINUX_SIGILL: u32 = 4;
pub const LINUX_SIGTRAP: u32 = 5;
pub const LINUX_SIGABRT: u32 = 6;
pub const LINUX_SIGIOT: u32 = 6;
pub const LINUX_SIGBUS: u32 = 7;
pub const LINUX_SIGFPE: u32 = 8;
pub const LINUX_SIGKILL: u32 = 9;
pub const LINUX_SIGUSR1: u32 = 10;
pub const LINUX_SIGSEGV: u32 = 11;
pub const LINUX_SIGUSR2: u32 = 12;
pub const LINUX_SIGPIPE: u32 = 13;
pub const LINUX_SIGALRM: u32 = 14;
pub const LINUX_SIGTERM: u32 = 15;
pub const LINUX_SIGSTKFLT: u32 = 16;
pub const LINUX_SIGCHLD: u32 = 17;
pub const LINUX_SIGCONT: u32 = 18;
pub const LINUX_SIGSTOP: u32 = 19;
pub const LINUX_SIGTSTP: u32 = 20;
pub const LINUX_SIGTTIN: u32 = 21;
pub const LINUX_SIGTTOU: u32 = 22;
pub const LINUX_SIGURG: u32 = 23;
pub const LINUX_SIGXCPU: u32 = 24;
pub const LINUX_SIGXFSZ: u32 = 25;
pub const LINUX_SIGVTALRM: u32 = 26;
pub const LINUX_SIGPROF: u32 = 27;
pub const LINUX_SIGWINCH: u32 = 28;
pub const LINUX_SIGIO: u32 = 29;
pub const LINUX_SIGPOLL: u32 = 29;
pub const LINUX_SIGPWR: u32 = 30;
pub const LINUX_SIGSYS: u32 = 31;
pub const LINUX_SIGUNUSED: u32 = 31;
pub const LINUX_SIGRTMIN: u32 = 32;
pub const LINUX_SA_RESTORER: u32 = 67108864;
pub const LINUX_SIGSTKSZ: u32 = 8192;
pub const LINUX_SA_NOCLDSTOP: u32 = 1;
pub const LINUX_SA_NOCLDWAIT: u32 = 2;
pub const LINUX_SA_SIGINFO: u32 = 4;
pub const LINUX_SA_UNSUPPORTED: u32 = 1024;
pub const LINUX_SA_EXPOSE_TAGBITS: u32 = 2048;
pub const LINUX_SA_ONSTACK: u32 = 134217728;
pub const LINUX_SA_RESTART: u32 = 268435456;
pub const LINUX_SA_NODEFER: u32 = 1073741824;
pub const LINUX_SA_RESETHAND: u32 = 2147483648;
pub const LINUX_SA_NOMASK: u32 = 1073741824;
pub const LINUX_SA_ONESHOT: u32 = 2147483648;
pub const LINUX_SIG_BLOCK: u32 = 0;
pub const LINUX_SIG_UNBLOCK: u32 = 1;
pub const LINUX_SIG_SETMASK: u32 = 2;
pub const LINUX_SI_MAX_SIZE: u32 = 128;
pub const LINUX_SI_USER: u32 = 0;
pub const LINUX_SI_KERNEL: u32 = 128;
pub const LINUX_SI_QUEUE: i32 = -1;
pub const LINUX_SI_TIMER: i32 = -2;
pub const LINUX_SI_MESGQ: i32 = -3;
pub const LINUX_SI_ASYNCIO: i32 = -4;
pub const LINUX_SI_SIGIO: i32 = -5;
pub const LINUX_SI_TKILL: i32 = -6;
pub const LINUX_SI_DETHREAD: i32 = -7;
pub const LINUX_SI_ASYNCNL: i32 = -60;
pub const LINUX_ILL_ILLOPC: u32 = 1;
pub const LINUX_ILL_ILLOPN: u32 = 2;
pub const LINUX_ILL_ILLADR: u32 = 3;
pub const LINUX_ILL_ILLTRP: u32 = 4;
pub const LINUX_ILL_PRVOPC: u32 = 5;
pub const LINUX_ILL_PRVREG: u32 = 6;
pub const LINUX_ILL_COPROC: u32 = 7;
pub const LINUX_ILL_BADSTK: u32 = 8;
pub const LINUX_ILL_BADIADDR: u32 = 9;
pub const LINUX_FPE_INTDIV: u32 = 1;
pub const LINUX_FPE_INTOVF: u32 = 2;
pub const LINUX_FPE_FLTDIV: u32 = 3;
pub const LINUX_FPE_FLTOVF: u32 = 4;
pub const LINUX_FPE_FLTUND: u32 = 5;
pub const LINUX_FPE_FLTRES: u32 = 6;
pub const LINUX_FPE_FLTINV: u32 = 7;
pub const LINUX_FPE_FLTSUB: u32 = 8;
pub const LINUX_FPE_FLTUNK: u32 = 14;
pub const LINUX_FPE_CONDTRAP: u32 = 15;
pub const LINUX_SEGV_MAPERR: u32 = 1;
pub const LINUX_SEGV_ACCERR: u32 = 2;
pub const LINUX_SEGV_BNDERR: u32 = 3;
pub const LINUX_SEGV_PKUERR: u32 = 4;
pub const LINUX_SEGV_ACCADI: u32 = 5;
pub const LINUX_SEGV_ADIDERR: u32 = 6;
pub const LINUX_SEGV_ADIPERR: u32 = 7;
pub const LINUX_SEGV_MTEAERR: u32 = 8;
pub const LINUX_SEGV_MTESERR: u32 = 9;
pub const LINUX_BUS_ADRALN: u32 = 1;
pub const LINUX_BUS_ADRERR: u32 = 2;
pub const LINUX_BUS_OBJERR: u32 = 3;
pub const LINUX_BUS_MCEERR_AR: u32 = 4;
pub const LINUX_BUS_MCEERR_AO: u32 = 5;
pub const LINUX_TRAP_BRKPT: u32 = 1;
pub const LINUX_TRAP_TRACE: u32 = 2;
pub const LINUX_TRAP_BRANCH: u32 = 3;
pub const LINUX_TRAP_HWBKPT: u32 = 4;
pub const LINUX_TRAP_UNK: u32 = 5;
pub const LINUX_TRAP_PERF: u32 = 6;
pub const LINUX_TRAP_PERF_FLAG_ASYNC: u32 = 1;
pub const LINUX_CLD_EXITED: u32 = 1;
pub const LINUX_CLD_KILLED: u32 = 2;
pub const LINUX_CLD_DUMPED: u32 = 3;
pub const LINUX_CLD_TRAPPED: u32 = 4;
pub const LINUX_CLD_STOPPED: u32 = 5;
pub const LINUX_CLD_CONTINUED: u32 = 6;
pub const LINUX_POLL_IN: u32 = 1;
pub const LINUX_POLL_OUT: u32 = 2;
pub const LINUX_POLL_MSG: u32 = 3;
pub const LINUX_POLL_ERR: u32 = 4;
pub const LINUX_POLL_PRI: u32 = 5;
pub const LINUX_POLL_HUP: u32 = 6;
pub const LINUX_SYS_SECCOMP: u32 = 1;
pub const LINUX_EMT_TAGOVF: u32 = 1;
pub const LINUX_SIGEV_SIGNAL: u32 = 0;
pub const LINUX_SIGEV_NONE: u32 = 1;
pub const LINUX_SIGEV_THREAD: u32 = 2;
pub const LINUX_SIGEV_THREAD_ID: u32 = 4;
pub const LINUX_SIGEV_MAX_SIZE: u32 = 64;
pub type linux___u32 = ::core::ffi::c_uint;
pub type linux___kernel_long_t = ::core::ffi::c_long;
pub type linux___kernel_pid_t = ::core::ffi::c_int;
pub type linux___kernel_uid32_t = ::core::ffi::c_uint;
pub type linux___kernel_old_time_t = linux___kernel_long_t;
pub type linux___kernel_clock_t = linux___kernel_long_t;
pub type linux___kernel_timer_t = ::core::ffi::c_int;
pub type linux___kernel_clockid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_timespec {
    pub ltv_sec: linux___kernel_old_time_t,
    pub ltv_nsec: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<linux_timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(linux_timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ltv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timespec),
            "::",
            stringify!(ltv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ltv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timespec),
            "::",
            stringify!(ltv_nsec)
        )
    );
}
pub type linux_sigset_t = ::core::ffi::c_ulong;
pub type linux___signalfn_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type linux___sighandler_t = linux___signalfn_t;
pub type linux___restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type linux___sigrestore_t = linux___restorefn_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sigaction {
    pub lsa_handler: linux___sighandler_t,
    pub lsa_flags: ::core::ffi::c_ulong,
    pub lsa_restorer: linux___sigrestore_t,
    pub lsa_mask: linux_sigset_t,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigaction> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigaction>(),
        32usize,
        concat!("Size of: ", stringify!(linux_sigaction))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigaction))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_restorer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_restorer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_mask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_sigval {
    pub lsival_int: ::core::ffi::c_int,
    pub lsival_ptr: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigval>(),
        8usize,
        concat!("Size of: ", stringify!(linux_sigval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigval),
            "::",
            stringify!(lsival_int)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigval),
            "::",
            stringify!(lsival_ptr)
        )
    );
}
pub type linux_sigval_t = linux_sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux___sifields {
    pub l_kill: linux___sifields__bindgen_ty_1,
    pub l_timer: linux___sifields__bindgen_ty_2,
    pub l_rt: linux___sifields__bindgen_ty_3,
    pub l_sigchld: linux___sifields__bindgen_ty_4,
    pub l_sigfault: linux___sifields__bindgen_ty_5,
    pub l_sigpoll: linux___sifields__bindgen_ty_6,
    pub l_sigsys: linux___sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_1 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_1),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_1),
            "::",
            stringify!(l_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_2 {
    pub l_tid: linux___kernel_timer_t,
    pub l_overrun: ::core::ffi::c_int,
    pub l_sigval: linux_sigval_t,
    pub l_sys_private: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_overrun)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_sigval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sys_private) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_sys_private)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_3 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
    pub l_sigval: linux_sigval_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_4 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
    pub l_status: ::core::ffi::c_int,
    pub l_utime: linux___kernel_clock_t,
    pub l_stime: linux___kernel_clock_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_4() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_4>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_4))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_utime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_5 {
    pub l_addr: *mut ::core::ffi::c_void,
    pub l__bindgen_anon_1: linux___sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux___sifields__bindgen_ty_5__bindgen_ty_1 {
    pub l_trapno: ::core::ffi::c_int,
    pub l_addr_lsb: ::core::ffi::c_short,
    pub l_addr_bnd: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub l_addr_pkey: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub l_perf: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub l_dummy_bnd: [::core::ffi::c_char; 8usize],
    pub l_lower: *mut ::core::ffi::c_void,
    pub l_upper: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_dummy_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_dummy_bnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_lower) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_lower)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_upper) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_upper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub l_dummy_pkey: [::core::ffi::c_char; 8usize],
    pub l_pkey: linux___u32,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_dummy_pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_dummy_pkey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_pkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub l_data: ::core::ffi::c_ulong,
    pub l_type: linux___u32,
    pub l_flags: linux___u32,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_flags)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_5__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_trapno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_lsb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_pkey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_perf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_perf)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_5> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_5))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5),
            "::",
            stringify!(l_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_6 {
    pub l_band: ::core::ffi::c_long,
    pub l_fd: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_6() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_6> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_6))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_6),
            "::",
            stringify!(l_band)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_6),
            "::",
            stringify!(l_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_7 {
    pub l_call_addr: *mut ::core::ffi::c_void,
    pub l_syscall: ::core::ffi::c_int,
    pub l_arch: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_7() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_7> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_7>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_7))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_syscall)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_arch)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_kill)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_timer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_rt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigsys)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_siginfo {
    pub l__bindgen_anon_1: linux_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_siginfo__bindgen_ty_1 {
    pub l__bindgen_anon_1: linux_siginfo__bindgen_ty_1__bindgen_ty_1,
    pub l_si_pad: [::core::ffi::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub lsi_signo: ::core::ffi::c_int,
    pub lsi_errno: ::core::ffi::c_int,
    pub lsi_code: ::core::ffi::c_int,
    pub l_sifields: linux___sifields,
}
#[test]
fn bindgen_test_layout_siginfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_siginfo__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo__bindgen_ty_1__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_signo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_errno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_sifields)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_siginfo__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(linux_siginfo__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_siginfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_si_pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1),
            "::",
            stringify!(l_si_pad)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo() {
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo>(),
        128usize,
        concat!("Size of: ", stringify!(linux_siginfo))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_siginfo))
    );
}
pub type linux_siginfo_t = linux_siginfo;
